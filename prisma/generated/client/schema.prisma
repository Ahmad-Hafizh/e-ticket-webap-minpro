// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "./generated/client"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// user schema
model User {
  user_id    Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  phone      String?
  password   String
  pfp_url    String?
  created_at DateTime @default(now())
  profile    Profile?
  isVerified Boolean  @default(false)
  role       Role     @default(user)

  referred_id Int?
  referral    Referral?
  referred    Referral? @relation(fields: [referred_id], references: [referral_id], name: "referred_user")
  points      Point[]
  coupons     Coupon[]

  organizer Organizer?

  review              Review[]
  transaction_details Transaction_Detail[]
  transaction         Transaction[]
  event               Event[]              @relation("Customer_event")

  @@map("users")
}

model Profile {
  profile_id    Int            @id @default(autoincrement())
  social_medias Social_media[]
  address       String?
  city          String?
  country       String?
  zipcode       String?
  birth_date    String?
  gender        Gender?
  user_id       Int            @unique
  user          User           @relation(fields: [user_id], references: [user_id])

  @@map("profile")
}

model Organizer {
  organizer_id      Int    @id @default(autoincrement())
  organizer_name    String @unique
  organizer_email   String @unique
  organizer_phone   String
  organizer_address String

  organizer_logo   String?
  organizer_banner String?
  organizer_bio    String?

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [user_id])

  bank_account Bank_account?
  events       Event[]

  @@map("organizer")
}

model Bank_account {
  bank_account_id     Int       @id @default(autoincrement())
  bank_name           String
  bank_account_name   String
  bank_account_number String
  organizer_id        Int       @unique
  organizer           Organizer @relation(fields: [organizer_id], references: [organizer_id])

  @@map("bank_account")
}

model Point {
  point_id     Int      @id @default(autoincrement())
  user         User     @relation(fields: [user_id], references: [user_id])
  user_id      Int
  amount       Int
  added_date   DateTime @default(now())
  expired_date DateTime

  @@map("points")
}

model Referral {
  referral_id    Int    @id @default(autoincrement())
  referral_code  String @unique
  user_id        Int    @unique
  user           User   @relation(fields: [user_id], references: [user_id])
  referred_users User[] @relation(name: "referred_user")

  @@map("referral")
}

model Social_media {
  social_id    Int      @id @default(autoincrement())
  profile      Profile  @relation(fields: [profile_id], references: [profile_id])
  profile_id   Int
  platform     Platform
  account_name String
  url          String

  @@map("social_media")
}

model Coupon {
  coupon_id    Int      @id @default(autoincrement())
  coupon_name  String
  user_id      Int
  user         User     @relation(fields: [user_id], references: [user_id])
  coupon_code  String
  discount     Int
  max_amount   Int?
  start_date   DateTime @default(now())
  expired_date DateTime

  @@map("coupons")
}

//Event
model Event {
  event_id          Int                  @id @default(autoincrement())
  organizer_id      Int
  organizer         Organizer            @relation(fields: [organizer_id], references: [organizer_id])
  event_category    Event_category[]     @relation("Event_categories") //Expected to hold multiple categories per event
  title             String               @unique
  description       String
  imgEvent          String
  coupon_id         Int //Decide the schema of coupon in relation to event! ***
  event_location_id Int                  @unique
  event_location    Event_Location       @relation(fields: [event_location_id], references: [event_location_id])
  ticket_types      Ticket_types[]
  startDate         DateTime
  endDate           DateTime
  startTime         String
  endTime           String
  timezone          String
  createdAt         DateTime             @default(now())
  updatedAt         DateTime
  score             Int?
  customer          User[]               @relation("Customer_event")
  transaction       Transaction_Detail[]
  review            Review[]

  @@map("event")
}

model Event_category {
  event_category_id Int     @id @default(autoincrement())
  category_name     String  @unique
  Event             Event[] @relation("Event_categories") //Expected to hold multiple events per category (for fronted filtering, etc)

  @@map("event_category")
}

//Event location
model Event_Location {
  event_location_id   Int              @id @default(autoincrement())
  address_name        String
  address             String
  location_city_id    Int
  city                Location_city    @relation(fields: [location_city_id], references: [location_city_id])
  location_country_id Int
  country             Location_country @relation(fields: [location_country_id], references: [location_country_id])
  zipcode             String?
  event               Event?

  @@map("event_location")
}

model Location_city {
  location_city_id Int              @id @default(autoincrement())
  city_name        String           @unique
  event_location   Event_Location[]

  @@map("location_city")
}

model Location_country {
  location_country_id Int              @id @default(autoincrement())
  country_name        String           @unique
  event_location      Event_Location[]

  @@map("location_country")
}

//Transaction
model Ticket_types {
  ticket_types_id     Int                  @id @default(autoincrement())
  event_id            Int
  event               Event                @relation(fields: [event_id], references: [event_id])
  types               String
  price               Int
  quantity_available  Int
  transaction_details Transaction_Detail[]

  @@map("ticket_types")
}

model Transaction_Detail {
  transaction_details_id Int          @id @default(autoincrement())
  user_id                Int
  user                   User         @relation(fields: [user_id], references: [user_id])
  event_id               Int
  event                  Event        @relation(fields: [event_id], references: [event_id])
  ticket_types_id        Int
  ticket_types           Ticket_types @relation(fields: [ticket_types_id], references: [ticket_types_id])
  quantity_bought        Int
  subtotal               Int
  transaction_id         Int
  transaction            Transaction? @relation(fields: [transaction_id], references: [transaction_id])

  @@map("transaction_detail")
}

model Transaction {
  transaction_id      Int                  @id @default(autoincrement())
  transaction_details Transaction_Detail[]
  user_id             Int
  user                User                 @relation(fields: [user_id], references: [user_id])
  coupon_id           Int? //Decide the schema of coupon in relation to transaction! ***
  total_amount        Int //Price after discount
  payment_method      PaymentMethod //Explore more about Midtrans API! ***
  createdAt           DateTime             @default(now())
  isPaid              Boolean

  @@map("transaction")
}

model Review {
  review_id   Int     @id @default(autoincrement())
  event_id    Int
  event       Event   @relation(fields: [event_id], references: [event_id])
  user_id     Int
  user        User    @relation(fields: [user_id], references: [user_id])
  review_text String
  review_img  String?
  score       Int
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  E_WALLET
}

enum Role {
  user
  organizer
}

enum AddressName {
  home
  shipping
  work
}

enum Platform {
  instagram
  twitter
  linkedIn
  whatsapp
  line
  behance
}

enum Gender {
  male
  female
}
